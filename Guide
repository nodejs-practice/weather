PRO GIT

CHAPTER 1: GETTING STARTED
Version control: System that records changes to a file or set of files over time so that you recall specific versions later

Local Version Cotrol Systems
* Keeping file copies in timestamped directories
* RCS: Keeps patch sets (difference between files) in a specific format. It will recreate a file by adding up all the patches.

Centralized Version Control Systems
CVS, Subversion and Perforce

Distributed Version Control Systems
Git, Mercurial, Bazaar or Darcs

History
Born in 2005

Git Basics
* Snapshots, not differences
* Nearly every operation is local
* Git has integrity: Everything in Git is check-summed before it is stored and is then referred to by that checksum
* Git generally only adds data
* The three states: committed, modified and staged
* Git directory stores metadata and object database. This is what is copied when you clone a repository from another computer.
* Staging area is generally a file contained in the Git directory which stores information about what will go into next commit.

Basic Git workflow
1. You modify files in your working directory.
2. You stage the files, adding snapshots of them to your staging area.
3. You do a commit, which takes the files as they are in the staging area and stores the snapshot permanantly to your Git directory.

First-time Git setup
- git config
git config lets you get and set configuration variables.

Places where git stores config variables.
* /etc/gitconfig or c:\ProgramData\Git\config on windows - system values. On windows this file could only be changed by git config -f <file> as an admin.
* ~/.gitconfig or ~./config/git/config or %userprofile% folder on windows - global values
* .git/config - local values

Your Identity
> git config --global user.name "John Doe"
> git config --global user.email johndoe@example.com

Your Editor
> $ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
> $ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"

Checking your Settings
> git config --list -> will list all config values

1.7 Getting help
> git help <verb>
> git <verb> --help
> man git-<verb>

CHAPTER 2: GIT Basics
2.1 Getting a Git Repository

git init - start tracking an existing directory
git add - will add specified files that you want to track
git commit -m <comment> - commits the added files
git clone <url> - will clone an existing repository. Will create a directory and initializes .git directory inside it. It pulls down all the data and checks out a working copy of the latest version.
git clone <url> <directoryName> - custom directory name

2.2 Recording changes to repository
git status - determine the state of the files
Default branch name is master
Untracked files - Files that are present in the directory which are not part of the repository. New files.
git add <file> - multi purpose command. you use it to  begin tracking files, to stage files and do other things like marking merge-conflicted files as resolved.

Short Status
git status -s or git status -short

Ignoring files
.gitignore
https://github.com/github/gitignore

Viewing your staged and unstaged changes
git diff - compares working directory with staging area
git diff -staged - to see what will go in commit. -staged and -cached are synonymous
git difftool - will show diff in an external tooltip

Committing changes
git commit - will launch editor for you to type commit message.
git commit -v - will include diff in the commit message.
git commit -m "Commit message"

Skipping the staging area
git commit -a -m "commit message"

Removing files
To remove a file from git, you have to remove it from your tracked files, which means remove it from staging area and then commit.
git rm - also removes the file from working directory
git rm -f <file> - will remove from index too.
git rm --cached <file> - will remove from staging

Moving files
git mv filename1 filename2 -> renames files

2.3 Viewing Commit History
git log
git log -p -2 => shows difference introduced in each commit, only shows last 2 commits
git log --stat => shows list of files modified
git log --pretty=oneline
git log --pretty --oneline
git log --pretty=format:"%h - %an, %ar : %s"
git log --pretty --graph
git log --since=2.weeks
git log --since=1.day
git log -Sfunction_name -> shows commits only with reference function_name

2.4 Undoing things
git commit --amend

Unstaging a staged file
git reset HEAD file --> to unstage a file
git checkout -- file --> to make file look like last commit

2.5 Working with remotes
git remote -> shows remotes configured
git remote -v -> shows remote urls

Adding Remote Repositories
git remote add <shortname> <url>
git fetch pb -> will fetch all information that pb has into pb/master. you can then merge that info into your local branch or create a new branch

Fetching and Pulling from your Remotes
git fetch [remote-name] - pulls down data from remote project that you don't have. It only fetches and doesn;t merge with your local work.

git pull -> fetches from the server and merges code into your local repository

Pushing to your remotes
git push [remote-name] [branch-name]

Inspecting a Remote
git remote show [remote-name]

Removing and Renaming Remotes
git remote rename pb paul -> will rename pb to paul
git remote rm paul -> will remove paul remote

2.6 Tagging
Listing your tags
git tag -> Lists tags in alphabetical order
git tag -l "v1.8.5*" -> filters

Types
lightweight - like a branch that doesn't change, just a pointer
annotated - stored as full objects in Git database. recommeded to create annotated tags

Creating Tags
Annotated Tags
git tag -a v1.4 -m "may version 1.4"

git show v1.4 -> shows information about tag

Lightweight Tags
To create lightweight tags, dont supply -a, -s or -m option
git tag v1.4-lw

Tagging Later
git tag -a v1.2 9fceb02

Sharing Tags
By default, git push doesn't transfer tags to remote servers.
git push origin [tagname]
git push origin --tags

Checking out Tags
git checkout -b [branch-name] [tagname]

2.7 Git Aliases
If you don't want to type the entire text of each of the Git commands, you can set aliases with git config command

eg: git config --global alias.co checkout
eg: git config --global alias.unstage 'reset HEAD --'
git unstage fileA will now mean git reset HEAD -- fileA

CHAPTER 3: GIT BRANCHING
Branching means diverging from the main line of development and continue to work without messing with that mainline

The default branch name in Git is master.

Creating a new Branch
git branch [branch-name]

In Git, a HEAD is a pointer to the local branch that you're currently on.

git log --oneline --decorate => shows where the branch pointers are pointing

Switching Branches
git checkout [branch-name] => This moves HEAD to point to the testing branch

git log --oneline --decorate --graph --all

3.2 Basic Branching and Merging
git checkout -b branchname is shortcut for git branch branchname and git checkout branchname

git checkout master
git merge hotfix

git branch -d hotfix -> deletes the branch

Basic Merging
Basic Merge conflicts
After you resolve the conflicts, run git add on each file to mark it as resolved. Staging the file marks it as resolved in Git.

git mergetool -> fires up an appropriate visual merge tool and walks you through the conflicts.

3.3 Branch Management

git branch -> lists all current branches. * shows the current branch that you are on.
git branch -v -> shows the last commit in all the branches
git branch --merged -> shows branches that are already merged into the current branch
git branch --no-merged -> shows branches that are not merged

3.4 Branching Workflows
Some strategies.
Long-running Branches
Topic Branches

3.5 Remote Branches
git fetch origin -> will fetch data from remote(origin) and update our local origin/master branch

Pushing
git push <remote> <branch>
git push <remote> <localbranch:remotebranch>

git checkout -b serverfix origin/serverfix -> will create a localbranch from remove serverfix branch

Tracking Branches
git branch -u origin/serverfix -> sets upstream of current branch to remote serverfix branch

git branch -vv -> displays alll tracking branches
git fetch --all -> will fetch all remote branches

Pulling
git pull => git fetch + git merge

Deleting remote branches
git push origin --delete serverfix => will delete serverfix from remote

3.6 Rebasing
Two main ways to integrate changes from one branch into another: merge and rebase

Basic Rebase
git checkout experiment
git rebase master

Read from More Interesting Rebases




~~~
GIT
FROM GIT REAL VIDEO
Distributed version control system
created by Linus Torvalds

git help
git help <command>

git config --global user.name <name>
git config --global user.email <email>
git config --global user.color.ui true

git init

untracked > staging > commit

git status
git add <filename> or git add <files,> or git add --all
git add *.txt, git add docs/*.txt, git add docs/
git add "*.txt" --> with quotes will add all text fiels in whole project
git commit -m "Desc"

git log

LEVEL II
git diff
git diff --staged
git reset HEAD <file> --> to unstage
git checkout --<file> -->file get restored to last commit, will lose all modifications since commit

git commit -a -m "desc" --> add stage and commit at once, doesnt add untracked files which means new files will not be committed
git reset --soft HEAD^ -> undo last commit and put changes into staging

> git add todo.txt
> git commit --amend -m "new comment for amending last commit"

git reset --hard HEAD^ -> undo last commit and all changes
git reset --hard HEAD^^ -> undo last 2 commits and all changes

git remote add <name> <git url> 
git remote rm <name>
git remote -v
git push -u origin master --> origin is remote repository name, master is the local branch to push

git pull

HEROKU
heroku create
git push will trigger deployment by heroku

LEVEL III
CLONE repository
git clone <git url>
GIT CLONE <GIT URL> name

Git clone downloads repo and adds 'origin' remote to the clone url

BRANCHING OUT
When you start working on a feature, its best to add a branch and work on it.
git branch cat -> creates branch named cat, will not checkout
git branch -> lists all branches and the current one checked out
git checkout cat -> switch to branch cat
git checkout -b cat -> will create branch and checks out

git merge cat -> will merge commits made in cat
git branch -d cat -> will remove cat branch

git pull = git fetch + git merge origin/master

REMOTE BRANCHES AND tags
git push origin shopping_cart --> adds shopping_cart branch to remote
git branch -r --> will show all remote branches
git remote show origin
git push origin :shopping_cart --> deletes remote branch, but not local branch
git branch -d shopping_cart --> may warn if commits are not merged anywhere
git branch -D shopping_cart --> delete anyway
git remote prune origin --> clean up old stale branches
git push heroku-staging staging:master --> will push and deploy staging on heroku, local:remote

Tags
reference to a specific commit
git tag --> list all tags
git checkout tagname --> checkout a commit
git tag -a tagname -m "comment" --> to add a new tag
git push --tags --> push tags to remotes

REBASE
git rebase.
1. moves all changes to master which are not on origin/master to a temp area
2. run all orign/master commit
3. run all commites in temp area one at a time

git checkout admin
git rebase master

git checkout master
git merge admin



------
Bootstrap
Bootstrap contains css, js and fonts. CSS folder contains 2 files, bootstrap and theme.

# Steps in html file
* 3 required head tags for bootstrap = meta charset=utf-8, meta http-equiv=X-UA-Compatible content=ID=edge and meta name=viewport content=width=device-width, initial-scale=1
* Reference CSS files.
* Add script code to support IE<9 for html5 support
* before body close tag, reference jquery and bootstrap js files.

class=row
class=col-lg-12, col-md-12, col-sm-12, col-xs-12
class=row-fluid
container, container-fluid
col-lg-offset-4 

push-left
pull-right

clearfix

SECTION 4
Lead Body Copy
.lead
<abbr title="Before Christ">BC</abbr> - creates hover tooltip
<abbr class="initialism" title="Before Christ">BC</abbr> - BC becomes less pronounced, smaller

<small>
<b> or <strong>
<i> or <em>

